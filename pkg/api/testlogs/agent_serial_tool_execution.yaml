metadata:
  name: "Agent Serial Tool Execution Test"
  description: "Test Agent node with serial tool execution: search website then send email summary"
  version: "1.0.0"

nodes:
  start:
    type: transform
    params:
      script: |
        return {
          prompt: "Search for information at https://httpbin.org/json and then send an email summary to beatsbybuddha@gmail.com",
          context: "agent-serial-tool-test"
        };
    next:
      default: agent_node

  agent_node:
    type: agent
    params:
      provider: openai
      api_key: ${secrets.OPENAI_API_KEY}
      model: gpt-4o-mini
      temperature: 0.3
      max_tokens: 500
      prompt: "Search for information at https://httpbin.org/json and then send an email summary to beatsbybuddha@gmail.com"
      tools:
        - type: function
          function:
            name: get_website
            description: Fetch content from a website URL
            parameters:
              type: object
              properties:
                url:
                  type: string
                  description: The URL to fetch content from
              required: ["url"]
        - type: function
          function:
            name: send_email
            description: Send an email with subject and body
            parameters:
              type: object
              properties:
                subject:
                  type: string
                  description: Email subject line
                body:
                  type: string
                  description: Email body content
                recipient:
                  type: string
                  description: Email recipient address
              required: ["subject", "body", "recipient"]
    next:
      default: router

  router:
    type: router
    params:
      condition_script: |
        console.log("AGENT ROUTER: Checking for tool calls");
        
        // Check for completion
        if (input && input.content && typeof input.content === 'string') {
          var content = input.content.toLowerCase();
          if (content.includes('sent') || content.includes('complete')) {
            console.log("AGENT ROUTER: Task completed, routing to finish");
            return 'finish';
          }
        }
        
        console.log("AGENT ROUTER: Continuing with default routing");
        return 'output';
    next:
      http_tool: http_request
      email_tool: email_send
      finish: end
      output: end

  http_request:
    type: http.request
    params:
      url: ${input.tool_params.url}
      method: GET
      headers:
        User-Agent: "FlowRunner-Agent-Test/1.0"
      timeout: 30
    next:
      default: format_http_response

  format_http_response:
    type: format
    params:
      script: |
        // Initialize conversation history for agent
        if (!shared.agent_conversation_history) {
          shared.agent_conversation_history = [
            {
              role: "system",
              content: "You are an AI agent with access to tools. Execute tools in sequence."
            },
            {
              role: "user", 
              content: input._original_prompt || input.prompt || "Search website and send email"
            }
          ];
        }
        
        // Format HTTP result
        var toolResult = "No content retrieved";
        if (input.body) {
          var preview = input.body.substring(0, 1000);
          toolResult = "Successfully retrieved website content (" + input.body.length + " characters):\n\n" + preview;
          if (input.body.length > 1000) {
            toolResult += "\n\n[Content truncated for brevity]";
          }
        }
        
        // Create tool response message
        var toolResponseMsg = {
          role: "tool",
          name: "get_website",
          content: toolResult,
          tool_call_id: input.tool_call ? input.tool_call.id : "unknown"
        };
        
        // Add to conversation history
        shared.agent_conversation_history.push({
          role: "assistant",
          content: "I'll fetch the website content for you.",
          tool_calls: input.tool_call ? [input.tool_call] : []
        });
        shared.agent_conversation_history.push(toolResponseMsg);
        
        return {
          tool_response: toolResponseMsg,
          conversation_history: shared.agent_conversation_history,
          prompt: "Now please send an email summary based on the website content.",
          _continue_conversation: true
        };
    next:
      default: continue_agent

  email_send:
    type: email.send
    params:
      smtp_host: "smtp.gmail.com"
      smtp_port: 587
      username: ${secrets.GMAIL_USERNAME}
      password: ${secrets.GMAIL_PASSWORD}
      from: ${secrets.GMAIL_USERNAME}
      to: ${input.tool_params.recipient}
      subject: ${input.tool_params.subject}
      body: ${input.tool_params.body}
      tls: true
    next:
      default: format_email_response

  format_email_response:
    type: format
    params:
      script: |
        // Format email result
        var toolResult = input.error 
          ? "Failed to send email: " + input.error
          : "Email sent successfully to " + (input.to || "recipient") + " with subject '" + (input.subject || "No subject") + "'";
        
        // Create tool response message
        var toolResponseMsg = {
          role: "tool",
          name: "send_email",
          content: toolResult,
          tool_call_id: input.tool_call ? input.tool_call.id : "unknown"
        };
        
        // Add to conversation history
        if (!shared.agent_conversation_history) {
          shared.agent_conversation_history = [];
        }
        
        shared.agent_conversation_history.push({
          role: "assistant",
          content: "I'll send the email for you.",
          tool_calls: input.tool_call ? [input.tool_call] : []
        });
        shared.agent_conversation_history.push(toolResponseMsg);
        
        return {
          tool_response: toolResponseMsg,
          conversation_history: shared.agent_conversation_history,
          prompt: "Please provide a final confirmation that both tasks are complete.",
          _continue_conversation: true
        };
    next:
      default: continue_agent

  continue_agent:
    type: transform
    params:
      script: |
        return {
          prompt: input.prompt || "Please continue based on the tool results.",
          conversation_history: shared.agent_conversation_history || [],
          _original_prompt: input._original_prompt || input.prompt
        };
    next:
      default: agent_node

  end:
    type: transform
    params:
      script: |
        return {
          final_response: input.response || input.content || "Agent task completed",
          conversation_history: shared.agent_conversation_history || [],
          execution_summary: {
            completed_successfully: !input.error,
            conversation_turns: (shared.agent_conversation_history || []).length,
            final_status: input.error ? "failed" : "completed",
            node_type: "agent"
          }
        };